{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Website CD Operator Website Continues Deployment & Delivery on Kubernetes as easy as Github pages. Features Operator provides common enterprise website use cases in GitOps style. Multiple environments deployment and its resources configuration Sharing common components across all sites - header, footer, search etc. Multiple SPAs (resp. any content) deployment under different contexts Git webhooks integration for continuous Deployment and Delivery GitOps - Control your website deployment and website's content delivery purely by git Extendable - ability to provide another repository of content in addition to git (e.g. FTP) The Simplest Use Case Step 1 - Describe your website and push it into your git repo apiVersion : v1 # Environments envs : dev : branch : main # dev git branch (can be git tag) prod : branch : prod # prod git branch (can be git tag e.g. \"1.0.0\") deployment : replicas : 2 # per environment deployment configuration # List of Website Components / Blocks components : - context : /theme # URL context of website shared component kind : git spec : url : https://github.com/websitecd/websitecd-examples.git dir : /websites/01-simple/theme # sub directory within git repo - context : / # URL context of main SPA kind : git spec : url : https://github.com/websitecd/websitecd-examples.git dir : /websites/01-simple/home Step 2 - Register your git repo in the operator. Create simple simple-site.yaml : apiVersion : websitecd.io/v1 kind : Website metadata : name : simple spec : gitUrl : https://github.com/websitecd/websitecd-examples.git dir : websites/01-simple # Relative path to your website.yaml secretToken : TOKENSIMPLE Apply it kubectl create namespace websitecd-examples kubectl apply -n websitecd-examples -f simple-site.yaml That's IT! Operator creates both dev and prod environment with main SPA and theme and is ready to accept Git webhook events for: Continues deployment (changes in environments or components) Continues delivery (changes in theme and main SPA ). More examples: websitecd-examples Supported Runtimes Kubernetes Minikube Openshift 3 Openshift 4 How To Install Operator: kubectl create namespace websitecd # Operator configuration kubectl create configmap -n websitecd websitecd-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n websitecd -f https://raw.githubusercontent.com/websitecd/operator/main/manifests/install.yaml Website: kubectl create namespace websitecd-examples # Advanced (Static): kubectl apply -n websitecd-examples -f https://raw.githubusercontent.com/websitecd/websitecd-examples/main/websites/02-advanced/deployment-advanced-preprodonly.yaml # Simple: kubectl apply -n websitecd-examples -f https://raw.githubusercontent.com/websitecd/websitecd-examples/main/websites/01-simple/deployment-simple-allenvs.yaml More examples","title":"Overview"},{"location":"#website-cd-operator","text":"Website Continues Deployment & Delivery on Kubernetes as easy as Github pages.","title":"Website CD Operator"},{"location":"#features","text":"Operator provides common enterprise website use cases in GitOps style. Multiple environments deployment and its resources configuration Sharing common components across all sites - header, footer, search etc. Multiple SPAs (resp. any content) deployment under different contexts Git webhooks integration for continuous Deployment and Delivery GitOps - Control your website deployment and website's content delivery purely by git Extendable - ability to provide another repository of content in addition to git (e.g. FTP)","title":"Features"},{"location":"#the-simplest-use-case","text":"","title":"The Simplest Use Case"},{"location":"#step-1-describe-your-website-and-push-it-into-your-git-repo","text":"apiVersion : v1 # Environments envs : dev : branch : main # dev git branch (can be git tag) prod : branch : prod # prod git branch (can be git tag e.g. \"1.0.0\") deployment : replicas : 2 # per environment deployment configuration # List of Website Components / Blocks components : - context : /theme # URL context of website shared component kind : git spec : url : https://github.com/websitecd/websitecd-examples.git dir : /websites/01-simple/theme # sub directory within git repo - context : / # URL context of main SPA kind : git spec : url : https://github.com/websitecd/websitecd-examples.git dir : /websites/01-simple/home","title":"Step 1 - Describe your website and push it into your git repo"},{"location":"#step-2-register-your-git-repo-in-the-operator","text":"Create simple simple-site.yaml : apiVersion : websitecd.io/v1 kind : Website metadata : name : simple spec : gitUrl : https://github.com/websitecd/websitecd-examples.git dir : websites/01-simple # Relative path to your website.yaml secretToken : TOKENSIMPLE Apply it kubectl create namespace websitecd-examples kubectl apply -n websitecd-examples -f simple-site.yaml That's IT! Operator creates both dev and prod environment with main SPA and theme and is ready to accept Git webhook events for: Continues deployment (changes in environments or components) Continues delivery (changes in theme and main SPA ). More examples: websitecd-examples","title":"Step 2 - Register your git repo in the operator."},{"location":"#supported-runtimes","text":"Kubernetes Minikube Openshift 3 Openshift 4","title":"Supported Runtimes"},{"location":"#how-to-install","text":"Operator: kubectl create namespace websitecd # Operator configuration kubectl create configmap -n websitecd websitecd-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n websitecd -f https://raw.githubusercontent.com/websitecd/operator/main/manifests/install.yaml Website: kubectl create namespace websitecd-examples # Advanced (Static): kubectl apply -n websitecd-examples -f https://raw.githubusercontent.com/websitecd/websitecd-examples/main/websites/02-advanced/deployment-advanced-preprodonly.yaml # Simple: kubectl apply -n websitecd-examples -f https://raw.githubusercontent.com/websitecd/websitecd-examples/main/websites/01-simple/deployment-simple-allenvs.yaml More examples","title":"How To Install"},{"location":"how-it-works/","text":"How It Works In very similar way how Github pages uses git branches the Website CD works with git repositories and branches resp. tags. Website itself is described in website.yaml and stored in git repository. It covers: Environments Components Once Website administrator registers such git repository the Operator parses website.yaml file and deploys each environment as separate runtime. Architecture Continuous Deployment & Delivery Thanks to /api/webhook the operator is notified via standard git events about changes in website.yaml file as well as about changes of website's components. Thanks to such architecture it creates/deletes environments dynamically and offer continous deployment . Also performs incremental updates (via git pull) to offer continuous delivery .","title":"How It Works"},{"location":"how-it-works/#how-it-works","text":"In very similar way how Github pages uses git branches the Website CD works with git repositories and branches resp. tags. Website itself is described in website.yaml and stored in git repository. It covers: Environments Components Once Website administrator registers such git repository the Operator parses website.yaml file and deploys each environment as separate runtime.","title":"How It Works"},{"location":"how-it-works/#architecture","text":"","title":"Architecture"},{"location":"how-it-works/#continuous-deployment-delivery","text":"Thanks to /api/webhook the operator is notified via standard git events about changes in website.yaml file as well as about changes of website's components. Thanks to such architecture it creates/deletes environments dynamically and offer continous deployment . Also performs incremental updates (via git pull) to offer continuous delivery .","title":"Continuous Deployment &amp; Delivery"},{"location":"support/","text":"Support Ask a question . Read or create an issue .","title":"Support"},{"location":"support/#support","text":"Ask a question . Read or create an issue .","title":"Support"},{"location":"developer-guide/","text":"Developer Guide - Overview This section covers how to develop the operator.","title":"Overview"},{"location":"developer-guide/#developer-guide-overview","text":"This section covers how to develop the operator.","title":"Developer Guide - Overview"},{"location":"developer-guide/operator-performance-tests/","text":"Operator Performance Testsuite This testsuite covers performance of the operator. Prepare cluster / minikube minikube delete minikube config set driver hyperkit minikube config set memory 8192 minikube config set cpus 4 minikube start --addons ingress,dashboard,metrics-server echo \" $( minikube ip ) minikube.info operator-websitecd.minikube.info simple-dev-websitecd-examples.minikube.info simple-prod-websitecd-examples.minikube.info advanced-dev-websitecd-examples.minikube.info advanced-prod-websitecd-examples.minikube.info\" | sudo tee -a /etc/hosts Deploy Operator kubectl create namespace websitecd # Operator configuration kubectl create configmap -n websitecd websitecd-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n websitecd -f manifests/install.yaml kubectl apply -n websitecd -f manifests/minikube/ingress.yaml Operator is available under https://operator-websitecd.minikube.info/ . Deploy sample website Deploy Website kubectl create namespace websitecd-examples kubectl apply -n websitecd-examples -f tests/performance/simple/deployment-simple-dev.yaml And watch: kubectl get -n websitecd-examples websites.websitecd.io -w Prepare Watch Windows Watch operator deployments: kubectl get -n websitecd deployment -w Dashboard: minikube dashboard Webhook 1 - no matched website or components Run jmeter cd tests/performance/operator $JMETER /bin/jmeter.sh -t perftest-operator-webhook.jmx & Configuration 1 requests URL: webhook - no matched website or components 10 concurrent requests 10000 loops 500m CPU, 2 replicas kubectl apply -n websitecd -f patch-cpu-500m.yaml kubectl scale -n websitecd --replicas = 2 deployment websitecd-operator Website is available under simple-dev-websitecd-examples.minikube.info 500m CPU, 4 replicas kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd --replicas = 4 deployment websitecd-operator 1000m CPU, 2 replicas kubectl apply -n websitecd -f patch-cpu-1000m.yaml kubectl scale -n websitecd --replicas = 2 deployment websitecd-operator Cleanup kubectl delete -n websitecd-examples websites.websitecd.io --all Results 2021-03-04 Model Identifier: MacBookPro16,1 Processor Name: 6-Core Intel Core i7 Processor Speed: 2,6 GHz Number of Processors: 1 Total Number of Cores: 6 L2 Cache (per Core): 256 KB L3 Cache: 12 MB Hyper-Threading Technology: Enabled Memory: 32 GB CPU Replicas Webhook 1 500m 2 527 500m 4 800 1000m 2 1200 Result numbers are throughput requests/second.","title":"Operator Performance Testsuite"},{"location":"developer-guide/operator-performance-tests/#operator-performance-testsuite","text":"This testsuite covers performance of the operator.","title":"Operator Performance Testsuite"},{"location":"developer-guide/operator-performance-tests/#prepare-cluster-minikube","text":"minikube delete minikube config set driver hyperkit minikube config set memory 8192 minikube config set cpus 4 minikube start --addons ingress,dashboard,metrics-server echo \" $( minikube ip ) minikube.info operator-websitecd.minikube.info simple-dev-websitecd-examples.minikube.info simple-prod-websitecd-examples.minikube.info advanced-dev-websitecd-examples.minikube.info advanced-prod-websitecd-examples.minikube.info\" | sudo tee -a /etc/hosts","title":"Prepare cluster / minikube"},{"location":"developer-guide/operator-performance-tests/#deploy-operator","text":"kubectl create namespace websitecd # Operator configuration kubectl create configmap -n websitecd websitecd-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n websitecd -f manifests/install.yaml kubectl apply -n websitecd -f manifests/minikube/ingress.yaml Operator is available under https://operator-websitecd.minikube.info/ .","title":"Deploy Operator"},{"location":"developer-guide/operator-performance-tests/#deploy-sample-website","text":"Deploy Website kubectl create namespace websitecd-examples kubectl apply -n websitecd-examples -f tests/performance/simple/deployment-simple-dev.yaml And watch: kubectl get -n websitecd-examples websites.websitecd.io -w","title":"Deploy sample website"},{"location":"developer-guide/operator-performance-tests/#prepare-watch-windows","text":"Watch operator deployments: kubectl get -n websitecd deployment -w Dashboard: minikube dashboard","title":"Prepare Watch Windows"},{"location":"developer-guide/operator-performance-tests/#webhook-1-no-matched-website-or-components","text":"Run jmeter cd tests/performance/operator $JMETER /bin/jmeter.sh -t perftest-operator-webhook.jmx &","title":"Webhook 1 - no matched website or components"},{"location":"developer-guide/operator-performance-tests/#configuration","text":"1 requests URL: webhook - no matched website or components 10 concurrent requests 10000 loops","title":"Configuration"},{"location":"developer-guide/operator-performance-tests/#500m-cpu-2-replicas","text":"kubectl apply -n websitecd -f patch-cpu-500m.yaml kubectl scale -n websitecd --replicas = 2 deployment websitecd-operator Website is available under simple-dev-websitecd-examples.minikube.info","title":"500m CPU, 2 replicas"},{"location":"developer-guide/operator-performance-tests/#500m-cpu-4-replicas","text":"kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd --replicas = 4 deployment websitecd-operator","title":"500m CPU, 4 replicas"},{"location":"developer-guide/operator-performance-tests/#1000m-cpu-2-replicas","text":"kubectl apply -n websitecd -f patch-cpu-1000m.yaml kubectl scale -n websitecd --replicas = 2 deployment websitecd-operator","title":"1000m CPU, 2 replicas"},{"location":"developer-guide/operator-performance-tests/#cleanup","text":"kubectl delete -n websitecd-examples websites.websitecd.io --all","title":"Cleanup"},{"location":"developer-guide/operator-performance-tests/#results","text":"","title":"Results"},{"location":"developer-guide/operator-performance-tests/#2021-03-04","text":"Model Identifier: MacBookPro16,1 Processor Name: 6-Core Intel Core i7 Processor Speed: 2,6 GHz Number of Processors: 1 Total Number of Cores: 6 L2 Cache (per Core): 256 KB L3 Cache: 12 MB Hyper-Threading Technology: Enabled Memory: 32 GB CPU Replicas Webhook 1 500m 2 527 500m 4 800 1000m 2 1200 Result numbers are throughput requests/second.","title":"2021-03-04"},{"location":"developer-guide/project-structure/","text":"Project Structure Git Repositories The Website CD github organization provides these repos: Operator - The main operator repo Content GIT - component git support Websites Examples - various examples Maven Project consists of three modules config - Operator configuration model classes config-validator - website.yaml validator and json schema service - Operator main business logic Repository Maven artefacts are pushed to jboss.org repository . If other project depends on e.g. operator-config artefact Add this repository to pom.xml: https://repository.jboss.org/nexus/content/repositories/DXP/ and dependency: <dependency> <groupId> io.websitecd.operator </groupId> <artifactId> operator-config </artifactId> <version> 1.1.0 </version> </dependency>","title":"Project Structure"},{"location":"developer-guide/project-structure/#project-structure","text":"","title":"Project Structure"},{"location":"developer-guide/project-structure/#git-repositories","text":"The Website CD github organization provides these repos: Operator - The main operator repo Content GIT - component git support Websites Examples - various examples","title":"Git Repositories"},{"location":"developer-guide/project-structure/#maven","text":"Project consists of three modules config - Operator configuration model classes config-validator - website.yaml validator and json schema service - Operator main business logic","title":"Maven"},{"location":"developer-guide/project-structure/#repository","text":"Maven artefacts are pushed to jboss.org repository . If other project depends on e.g. operator-config artefact Add this repository to pom.xml: https://repository.jboss.org/nexus/content/repositories/DXP/ and dependency: <dependency> <groupId> io.websitecd.operator </groupId> <artifactId> operator-config </artifactId> <version> 1.1.0 </version> </dependency>","title":"Repository"},{"location":"developer-guide/release/","text":"Release Perform test first mvn clean package Update operator's target version quay.io/websitecd/operator-jvm:<VERSION> in install.yaml manifest. Perform maven release - prompted for target version which creates a tag mvn clean release:prepare release:perform Wait till Deploy to registries completes. Create a Github release based on the latest tag and document the release.","title":"Release"},{"location":"developer-guide/release/#release","text":"Perform test first mvn clean package Update operator's target version quay.io/websitecd/operator-jvm:<VERSION> in install.yaml manifest. Perform maven release - prompted for target version which creates a tag mvn clean release:prepare release:perform Wait till Deploy to registries completes. Create a Github release based on the latest tag and document the release.","title":"Release"},{"location":"developer-guide/running-locally/","text":"Running Website CD Locally Minikube minikube config set driver hyperkit minikube start --addons ingress,dashboard --cpus 4 --memory 8192 minikube dashboard # tunnel not needed if using /etc/hosts bellow # minikube tunnel echo \" $( minikube ip ) minikube.info operator-websitecd.minikube.info simple-dev-websitecd-examples.minikube.info simple-prod-websitecd-examples.minikube.info advanced-dev-websitecd-examples.minikube.info advanced-prod-websitecd-examples.minikube.info\" | sudo tee -a /etc/hosts kubectl create namespace websitecd-examples Logs kubectl -n websitecd logs --selector = websitecd-operator-layer = service --tail 10 -f Local Development The only CRD needs to be registered: kubectl apply -f manifests/minikube/crd.yaml Build project mvn clean install Dev Mode Default values for dev mode are stored in application.properties in section # DEV cd service mvn quarkus:dev In few seconds the operator is up and connects to k8s cluster and listening to CRD changes. Register website simple or advanced . Setting kubectl context To view which context do you use just do: kubectl config current-context To switch to minikube context do: kubectl config use-context minikube Webhook API Development Init websites git repos rm -rf /tmp/repos ; mkdir /tmp/repos cp config/src/test/resources/gitconfig-test.yaml /tmp/repos/static-content-config.yaml docker run --rm -e \"CONFIG_PATH=/app/data/static-content-config.yaml\" -e \"TARGET_DIR=/app/data\" -e \"GIT_SSL_NO_VERIFY=true\" -v \"/tmp/repos/:/app/data/\" quay.io/websitecd/content-git-init Start content-git-api on port 8090 docker run --rm -e \"APP_DATA_DIR=/app/data\" -v \"/tmp/repos/:/app/data/\" -p 8090 :8090 quay.io/websitecd/content-git-api Fire event: WEBHOOK_URL = http://localhost:8080/api/webhook # WEBHOOK_URL=http://operator-websitecd.minikube.info/api/webhook curl -i -X POST $WEBHOOK_URL -H \"Content-Type: application/json\" -H \"X-Gitlab-Event: Push Hook\" -H \"X-Gitlab-Token: TOKENSIMPLE\" --data-binary \"@src/test/resources/gitlab-push.json\" Build Docker Image You don't need to care about building docker images because they're covered by Github Action but for development purposes you can do it locally: mvn clean install cd service docker build -f src/main/docker/Dockerfile.jvm -t websitecd/operator-jvm . Run image: docker run -i --rm -e APP_OPERATOR_PROVIDER_ENV_ENABLED = true -e APP_OPERATOR_PROVIDER_CRD_ENABLED = false -e WEBSITE_NAMESPACE = websitecd-examples \\ -e WEBSITE_NAME = simple -e WEBSITE_GITURL = https://github.com/websitecd/websitecd-examples.git -e WEBSITE_CONFIG_DIR = websites/02-advanced -e WEBSITE_WEBHOOK_SECRET = TOKENSIMPLE \\ -p 8080 :8080 websitecd/operator-jvm","title":"Running Website CD Locally"},{"location":"developer-guide/running-locally/#running-website-cd-locally","text":"","title":"Running Website CD Locally"},{"location":"developer-guide/running-locally/#minikube","text":"minikube config set driver hyperkit minikube start --addons ingress,dashboard --cpus 4 --memory 8192 minikube dashboard # tunnel not needed if using /etc/hosts bellow # minikube tunnel echo \" $( minikube ip ) minikube.info operator-websitecd.minikube.info simple-dev-websitecd-examples.minikube.info simple-prod-websitecd-examples.minikube.info advanced-dev-websitecd-examples.minikube.info advanced-prod-websitecd-examples.minikube.info\" | sudo tee -a /etc/hosts kubectl create namespace websitecd-examples","title":"Minikube"},{"location":"developer-guide/running-locally/#logs","text":"kubectl -n websitecd logs --selector = websitecd-operator-layer = service --tail 10 -f","title":"Logs"},{"location":"developer-guide/running-locally/#local-development","text":"The only CRD needs to be registered: kubectl apply -f manifests/minikube/crd.yaml","title":"Local Development"},{"location":"developer-guide/running-locally/#build-project","text":"mvn clean install","title":"Build project"},{"location":"developer-guide/running-locally/#dev-mode","text":"Default values for dev mode are stored in application.properties in section # DEV cd service mvn quarkus:dev In few seconds the operator is up and connects to k8s cluster and listening to CRD changes. Register website simple or advanced .","title":"Dev Mode"},{"location":"developer-guide/running-locally/#setting-kubectl-context","text":"To view which context do you use just do: kubectl config current-context To switch to minikube context do: kubectl config use-context minikube","title":"Setting kubectl context"},{"location":"developer-guide/running-locally/#webhook-api-development","text":"Init websites git repos rm -rf /tmp/repos ; mkdir /tmp/repos cp config/src/test/resources/gitconfig-test.yaml /tmp/repos/static-content-config.yaml docker run --rm -e \"CONFIG_PATH=/app/data/static-content-config.yaml\" -e \"TARGET_DIR=/app/data\" -e \"GIT_SSL_NO_VERIFY=true\" -v \"/tmp/repos/:/app/data/\" quay.io/websitecd/content-git-init Start content-git-api on port 8090 docker run --rm -e \"APP_DATA_DIR=/app/data\" -v \"/tmp/repos/:/app/data/\" -p 8090 :8090 quay.io/websitecd/content-git-api Fire event: WEBHOOK_URL = http://localhost:8080/api/webhook # WEBHOOK_URL=http://operator-websitecd.minikube.info/api/webhook curl -i -X POST $WEBHOOK_URL -H \"Content-Type: application/json\" -H \"X-Gitlab-Event: Push Hook\" -H \"X-Gitlab-Token: TOKENSIMPLE\" --data-binary \"@src/test/resources/gitlab-push.json\"","title":"Webhook API Development"},{"location":"developer-guide/running-locally/#build-docker-image","text":"You don't need to care about building docker images because they're covered by Github Action but for development purposes you can do it locally: mvn clean install cd service docker build -f src/main/docker/Dockerfile.jvm -t websitecd/operator-jvm . Run image: docker run -i --rm -e APP_OPERATOR_PROVIDER_ENV_ENABLED = true -e APP_OPERATOR_PROVIDER_CRD_ENABLED = false -e WEBSITE_NAMESPACE = websitecd-examples \\ -e WEBSITE_NAME = simple -e WEBSITE_GITURL = https://github.com/websitecd/websitecd-examples.git -e WEBSITE_CONFIG_DIR = websites/02-advanced -e WEBSITE_WEBHOOK_SECRET = TOKENSIMPLE \\ -p 8080 :8080 websitecd/operator-jvm","title":"Build Docker Image"},{"location":"developer-guide/website-performance-tests/","text":"Website Performance Testsuite This testsuite covers performance of target website environment. Prepare cluster / minikube minikube delete minikube config set driver hyperkit minikube config set memory 8192 minikube config set cpus 4 minikube start --addons ingress,dashboard,metrics-server echo \" $( minikube ip ) minikube.info operator-websitecd.minikube.info simple-dev-websitecd-examples.minikube.info simple-prod-websitecd-examples.minikube.info advanced-dev-websitecd-examples.minikube.info advanced-prod-websitecd-examples.minikube.info\" | sudo tee -a /etc/hosts Deploy Operator kubectl create namespace websitecd # Operator configuration kubectl create configmap -n websitecd websitecd-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n websitecd -f manifests/install.yaml Prepare Watch Windows Watch deployments: kubectl create namespace websitecd-examples kubectl get -n websitecd-examples deployment -w Dashboard: minikube dashboard Simple Website Testsuite (no SSI) Run jmeter $JMETER /bin/jmeter.sh -t tests/performance/simple/perftest-simple.jmx & Deploy Website cd tests/performance/simple/ kubectl apply -n websitecd-examples -f deployment-simple-dev.yaml Configuration 3 requests per test: main page, css, js 100 concurrent requests 100 loops 500m CPU, 2 replicas kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd-examples --replicas = 2 deployment simple-content-dev Website is available under simple-dev-websitecd-examples.minikube.info 500m CPU, 4 replicas kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd-examples --replicas = 4 deployment simple-content-dev 1000m CPU, 2 replicas kubectl apply -n websitecd-examples -f patch-cpu-1000m.yaml kubectl scale -n websitecd-examples --replicas = 2 deployment simple-content-dev 1000m CPU, 4 replicas kubectl apply -n websitecd-examples -f patch-cpu-1000m.yaml kubectl scale -n websitecd-examples --replicas = 4 deployment simple-content-dev Cleanup kubectl delete -n websitecd-examples websites.websitecd.io --all Advanced Website Testsuite (SSI used) Run jmeter $JMETER /bin/jmeter.sh -t tests/performance/advanced/perftest-advanced.jmx & Deploy Website cd tests/performance/advanced/ kubectl apply -n websitecd-examples -f deployment-advanced-dev.yaml Configuration 3 requests per test: main page (SSI performed), css, js 100 concurrent requests 100 loops 500m CPU, 2 replicas kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd-examples --replicas = 2 deployment advanced-content-dev Website is available under advanced-dev-websitecd-examples.minikube.info 500m CPU, 4 replicas kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd-examples --replicas = 4 deployment advanced-content-dev 1000m CPU, 2 replicas kubectl apply -n websitecd-examples -f patch-cpu-1000m.yaml kubectl scale -n websitecd-examples --replicas = 2 deployment advanced-content-dev 1000m CPU, 4 replicas kubectl apply -n websitecd-examples -f patch-cpu-1000m.yaml kubectl scale -n websitecd-examples --replicas = 4 deployment advanced-content-dev Cleanup kubectl delete -n websitecd-examples websites.websitecd.io --all Results 2021-03-04 Model Identifier: MacBookPro16,1 Processor Name: 6-Core Intel Core i7 Processor Speed: 2,6 GHz Number of Processors: 1 Total Number of Cores: 6 L2 Cache (per Core): 256 KB L3 Cache: 12 MB Hyper-Threading Technology: Enabled Memory: 32 GB CPU Replicas Simple Web Advanced Web 500m 2 2100 1360 500m 4 4300 2780 1000m 2 3000 2700 1000m 4 3700 3300 Result numbers are throughput requests/second.","title":"Website Performance Testsuite"},{"location":"developer-guide/website-performance-tests/#website-performance-testsuite","text":"This testsuite covers performance of target website environment.","title":"Website Performance Testsuite"},{"location":"developer-guide/website-performance-tests/#prepare-cluster-minikube","text":"minikube delete minikube config set driver hyperkit minikube config set memory 8192 minikube config set cpus 4 minikube start --addons ingress,dashboard,metrics-server echo \" $( minikube ip ) minikube.info operator-websitecd.minikube.info simple-dev-websitecd-examples.minikube.info simple-prod-websitecd-examples.minikube.info advanced-dev-websitecd-examples.minikube.info advanced-prod-websitecd-examples.minikube.info\" | sudo tee -a /etc/hosts","title":"Prepare cluster / minikube"},{"location":"developer-guide/website-performance-tests/#deploy-operator","text":"kubectl create namespace websitecd # Operator configuration kubectl create configmap -n websitecd websitecd-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n websitecd -f manifests/install.yaml","title":"Deploy Operator"},{"location":"developer-guide/website-performance-tests/#prepare-watch-windows","text":"Watch deployments: kubectl create namespace websitecd-examples kubectl get -n websitecd-examples deployment -w Dashboard: minikube dashboard","title":"Prepare Watch Windows"},{"location":"developer-guide/website-performance-tests/#simple-website-testsuite-no-ssi","text":"Run jmeter $JMETER /bin/jmeter.sh -t tests/performance/simple/perftest-simple.jmx & Deploy Website cd tests/performance/simple/ kubectl apply -n websitecd-examples -f deployment-simple-dev.yaml","title":"Simple Website Testsuite (no SSI)"},{"location":"developer-guide/website-performance-tests/#configuration","text":"3 requests per test: main page, css, js 100 concurrent requests 100 loops","title":"Configuration"},{"location":"developer-guide/website-performance-tests/#500m-cpu-2-replicas","text":"kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd-examples --replicas = 2 deployment simple-content-dev Website is available under simple-dev-websitecd-examples.minikube.info","title":"500m CPU, 2 replicas"},{"location":"developer-guide/website-performance-tests/#500m-cpu-4-replicas","text":"kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd-examples --replicas = 4 deployment simple-content-dev","title":"500m CPU, 4 replicas"},{"location":"developer-guide/website-performance-tests/#1000m-cpu-2-replicas","text":"kubectl apply -n websitecd-examples -f patch-cpu-1000m.yaml kubectl scale -n websitecd-examples --replicas = 2 deployment simple-content-dev","title":"1000m CPU, 2 replicas"},{"location":"developer-guide/website-performance-tests/#1000m-cpu-4-replicas","text":"kubectl apply -n websitecd-examples -f patch-cpu-1000m.yaml kubectl scale -n websitecd-examples --replicas = 4 deployment simple-content-dev","title":"1000m CPU, 4 replicas"},{"location":"developer-guide/website-performance-tests/#cleanup","text":"kubectl delete -n websitecd-examples websites.websitecd.io --all","title":"Cleanup"},{"location":"developer-guide/website-performance-tests/#advanced-website-testsuite-ssi-used","text":"Run jmeter $JMETER /bin/jmeter.sh -t tests/performance/advanced/perftest-advanced.jmx & Deploy Website cd tests/performance/advanced/ kubectl apply -n websitecd-examples -f deployment-advanced-dev.yaml","title":"Advanced Website Testsuite (SSI used)"},{"location":"developer-guide/website-performance-tests/#configuration_1","text":"3 requests per test: main page (SSI performed), css, js 100 concurrent requests 100 loops","title":"Configuration"},{"location":"developer-guide/website-performance-tests/#500m-cpu-2-replicas_1","text":"kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd-examples --replicas = 2 deployment advanced-content-dev Website is available under advanced-dev-websitecd-examples.minikube.info","title":"500m CPU, 2 replicas"},{"location":"developer-guide/website-performance-tests/#500m-cpu-4-replicas_1","text":"kubectl apply -n websitecd-examples -f patch-cpu-500m.yaml kubectl scale -n websitecd-examples --replicas = 4 deployment advanced-content-dev","title":"500m CPU, 4 replicas"},{"location":"developer-guide/website-performance-tests/#1000m-cpu-2-replicas_1","text":"kubectl apply -n websitecd-examples -f patch-cpu-1000m.yaml kubectl scale -n websitecd-examples --replicas = 2 deployment advanced-content-dev","title":"1000m CPU, 2 replicas"},{"location":"developer-guide/website-performance-tests/#1000m-cpu-4-replicas_1","text":"kubectl apply -n websitecd-examples -f patch-cpu-1000m.yaml kubectl scale -n websitecd-examples --replicas = 4 deployment advanced-content-dev","title":"1000m CPU, 4 replicas"},{"location":"developer-guide/website-performance-tests/#cleanup_1","text":"kubectl delete -n websitecd-examples websites.websitecd.io --all","title":"Cleanup"},{"location":"developer-guide/website-performance-tests/#results","text":"","title":"Results"},{"location":"developer-guide/website-performance-tests/#2021-03-04","text":"Model Identifier: MacBookPro16,1 Processor Name: 6-Core Intel Core i7 Processor Speed: 2,6 GHz Number of Processors: 1 Total Number of Cores: 6 L2 Cache (per Core): 256 KB L3 Cache: 12 MB Hyper-Threading Technology: Enabled Memory: 32 GB CPU Replicas Simple Web Advanced Web 500m 2 2100 1360 500m 4 4300 2780 1000m 2 3000 2700 1000m 4 3700 3300 Result numbers are throughput requests/second.","title":"2021-03-04"},{"location":"operator-manual/","text":"Operator Manual - Overview This guide is for administrator and operator wanting to install and configure Website CD.","title":"Overview"},{"location":"operator-manual/#operator-manual-overview","text":"This guide is for administrator and operator wanting to install and configure Website CD.","title":"Operator Manual - Overview"},{"location":"operator-manual/configuration/","text":"Operator Configuration Important Configuration Properties Environment Variable Default Description APP_OPERATOR_ROUTER_MODE disabled Router module. Values: ingress or openshift APP_OPERATOR_PROVIDER_CRD_ENABLED true If false CRD is not watched APP_OPERATOR_PROVIDER_ENV_ENABLED false If true then operator expects website definition via ENV variable. See example APP_OPERATOR_IMAGE_INIT_NAME quay.io/websitecd/content-git-init Init image name APP_OPERATOR_IMAGE_INIT_VERSION 1.1.1 Init image version APP_OPERATOR_IMAGE_HTTPD_NAME spaship/httpd Httpd image name APP_OPERATOR_IMAGE_HTTPD_VERSION latest Httpd image version APP_OPERATOR_IMAGE_API_NAME quay.io/websitecd/content-git-api Api image name APP_OPERATOR_IMAGE_API_VERSION 1.1.1 Api image version","title":"Operator Configuration"},{"location":"operator-manual/configuration/#operator-configuration","text":"","title":"Operator Configuration"},{"location":"operator-manual/configuration/#important-configuration-properties","text":"Environment Variable Default Description APP_OPERATOR_ROUTER_MODE disabled Router module. Values: ingress or openshift APP_OPERATOR_PROVIDER_CRD_ENABLED true If false CRD is not watched APP_OPERATOR_PROVIDER_ENV_ENABLED false If true then operator expects website definition via ENV variable. See example APP_OPERATOR_IMAGE_INIT_NAME quay.io/websitecd/content-git-init Init image name APP_OPERATOR_IMAGE_INIT_VERSION 1.1.1 Init image version APP_OPERATOR_IMAGE_HTTPD_NAME spaship/httpd Httpd image name APP_OPERATOR_IMAGE_HTTPD_VERSION latest Httpd image version APP_OPERATOR_IMAGE_API_NAME quay.io/websitecd/content-git-api Api image name APP_OPERATOR_IMAGE_API_VERSION 1.1.1 Api image version","title":"Important Configuration Properties"},{"location":"operator-manual/custom-ca-cert/","text":"Custom CA Certificate SSL Verification can be easily turned off by using sslVerify attribute in Website definition. However, it's recommended to correctly setup CA certificates if they're not as part of default certificates. To use custom CA certificate it's needed to customize 3 images: Operator Content Init Container Content Api Container Build Own Images One option is to build own images on top of Website CD default images. Follow Docker files bellow. Each contains instructions how to build own image. It's recommended to use version suffix e.g. 1.1.0-rhitca to make clear what is the parent image. Operator Content Init Container Content Api Container Once such images are build the operator needs to use them. Just set operator's system variables APP_OPERATOR_IMAGE_INIT_VERSION and APP_OPERATOR_IMAGE_API_VERSION in websitecd-operator-config config map.","title":"Custom CA Certificate"},{"location":"operator-manual/custom-ca-cert/#custom-ca-certificate","text":"SSL Verification can be easily turned off by using sslVerify attribute in Website definition. However, it's recommended to correctly setup CA certificates if they're not as part of default certificates. To use custom CA certificate it's needed to customize 3 images: Operator Content Init Container Content Api Container","title":"Custom CA Certificate"},{"location":"operator-manual/custom-ca-cert/#build-own-images","text":"One option is to build own images on top of Website CD default images. Follow Docker files bellow. Each contains instructions how to build own image. It's recommended to use version suffix e.g. 1.1.0-rhitca to make clear what is the parent image. Operator Content Init Container Content Api Container Once such images are build the operator needs to use them. Just set operator's system variables APP_OPERATOR_IMAGE_INIT_VERSION and APP_OPERATOR_IMAGE_API_VERSION in websitecd-operator-config config map.","title":"Build Own Images"},{"location":"user-guide/","text":"User Guide - Overview The User Guide explains how to design website.yaml and register the website in the cluster.","title":"Overview"},{"location":"user-guide/#user-guide-overview","text":"The User Guide explains how to design website.yaml and register the website in the cluster.","title":"User Guide - Overview"},{"location":"user-guide/live-website-coding/","text":"Live Website Development The operator allows to deploy a website into any cluster including local k8s clusters e.g. minikube. To enable Live Website Coding experience it's needed to: Local files sync to the environment Port forwarding from cluster to localhost These two features are nicely provided by Okteto . How to enable Live Website Development Deploy a website via operator like any other environment or just use existing local or remote deployment Install Okteto CLI Define which files should be synced via okteto.yaml configuration and optionally forward ports of other services e.g. REST API / DB etc. Guideline for okteto.yaml name : simple-content-dev # Name of the website's target deployment managed by operator (Required) command : httpd -D FOREGROUND # Same command as spaship/httpd (Required) # Mapping local directories to website's runtime container (spaship/httpd). # Can be just few of them or even new components that are not part of website.yaml # Root directory is `/var/www/html/` sync : - ../02-advanced/chrome:/var/www/html/template/ - ../shared-components:/var/www/html/shared-components/ - ../02-advanced/search:/var/www/html/search/ - ../02-advanced/home:/var/www/html/ persistentVolume : enabled : false # Volumes are disabled because they're initiated by init container forward : - 8080:8080 # Forward the spaship/httpd port to localhost resources : limits : cpu : \"100m\" memory : 100Mi # namespace: websitecd-examples # Optionally hard code the name of namespace Starting and Stopping Live Coding Starting live coding experience simple as okteto up -n websitecd-examples Website is available under http://localhost:8080 and any changes on local files are automatically synced to dev environment. Stopping live coding and rolling back to original state as simple as okteto down -n websitecd-examples Live REST API Development In exactly same way any website service can be developed like REST API. See the SPA + REST API + Mongo Website Example . Examples All website examples demonstrates how Okteto can be used: Simple Website and okteto.yaml Advanced Website and okteto.yaml SPA + REST API + Mongo Website and okteto.yaml","title":"Live Website Development"},{"location":"user-guide/live-website-coding/#live-website-development","text":"The operator allows to deploy a website into any cluster including local k8s clusters e.g. minikube. To enable Live Website Coding experience it's needed to: Local files sync to the environment Port forwarding from cluster to localhost These two features are nicely provided by Okteto .","title":"Live Website Development"},{"location":"user-guide/live-website-coding/#how-to-enable-live-website-development","text":"Deploy a website via operator like any other environment or just use existing local or remote deployment Install Okteto CLI Define which files should be synced via okteto.yaml configuration and optionally forward ports of other services e.g. REST API / DB etc.","title":"How to enable Live Website Development"},{"location":"user-guide/live-website-coding/#guideline-for-oktetoyaml","text":"name : simple-content-dev # Name of the website's target deployment managed by operator (Required) command : httpd -D FOREGROUND # Same command as spaship/httpd (Required) # Mapping local directories to website's runtime container (spaship/httpd). # Can be just few of them or even new components that are not part of website.yaml # Root directory is `/var/www/html/` sync : - ../02-advanced/chrome:/var/www/html/template/ - ../shared-components:/var/www/html/shared-components/ - ../02-advanced/search:/var/www/html/search/ - ../02-advanced/home:/var/www/html/ persistentVolume : enabled : false # Volumes are disabled because they're initiated by init container forward : - 8080:8080 # Forward the spaship/httpd port to localhost resources : limits : cpu : \"100m\" memory : 100Mi # namespace: websitecd-examples # Optionally hard code the name of namespace","title":"Guideline for okteto.yaml"},{"location":"user-guide/live-website-coding/#starting-and-stopping-live-coding","text":"Starting live coding experience simple as okteto up -n websitecd-examples Website is available under http://localhost:8080 and any changes on local files are automatically synced to dev environment. Stopping live coding and rolling back to original state as simple as okteto down -n websitecd-examples","title":"Starting and Stopping Live Coding"},{"location":"user-guide/live-website-coding/#live-rest-api-development","text":"In exactly same way any website service can be developed like REST API. See the SPA + REST API + Mongo Website Example .","title":"Live REST API Development"},{"location":"user-guide/live-website-coding/#examples","text":"All website examples demonstrates how Okteto can be used: Simple Website and okteto.yaml Advanced Website and okteto.yaml SPA + REST API + Mongo Website and okteto.yaml","title":"Examples"},{"location":"user-guide/website-management/","text":"Website Management Get Website Info kubectl get websites.websitecd.io -n websitecd-examples Output is: NAME GIT URL BRANCH DIR SSL VERIFY ENVIRONMENTS STATUS MESSAGE advanced https://github.com/websitecd/websitecd-examples.git websites/02-advanced true [ \"dev[1/1]\" ] Deployed simple https://github.com/websitecd/websitecd-examples.git websites/01-simple true [ \"prod[1/1]\" , \"dev[1/1]\" ] Deployed STATUS - Status of website. Can be: Git Clonning , Git Pulling , Creating , Deployed , Failed ENVIRONMENTS - Actual deployed environments and their ready/desired replicas. MESSAGE - Used for Failed status Register Website in Cluster Step 1: Create a namespace kubectl create namespace website Step 2: Create a my-website.yaml file and apply it in the cluster apiVersion : websitecd.io/v1 kind : Website metadata : name : my-website # Name of the website. Must be unique within namespace spec : gitUrl : https://github.com/websitecd/websitecd-examples.git branch : main # Branch (Optional) dir : websites/02-advanced # Location of website.yaml file. Default is \".\" sslVerify : false # Perform SSL verification. Default is \"true\" secretToken : TOKENADVANCED # Secret token for Webhook API envs : # Control which environment will be deployed to. If not defined all envs are deployed. kubectl apply -n website -f my-website.yaml Optional - Control Mapping Environments to Namespaces Thanks to exclusion and inclusion an administrator has under full control which environment will be deployed in which namespace. Example - excluded prod environment spec : envs : excluded : - prod Example - included only prod environment spec : envs : included : - prod Example - included only pr-* environment spec : envs : included : - pr-.* Delete Website in Cluster Delete website: kubectl delete websites.websitecd.io -n website my-website Delete namespace: kubectl delete namespace website","title":"Website Management"},{"location":"user-guide/website-management/#website-management","text":"","title":"Website Management"},{"location":"user-guide/website-management/#get-website-info","text":"kubectl get websites.websitecd.io -n websitecd-examples Output is: NAME GIT URL BRANCH DIR SSL VERIFY ENVIRONMENTS STATUS MESSAGE advanced https://github.com/websitecd/websitecd-examples.git websites/02-advanced true [ \"dev[1/1]\" ] Deployed simple https://github.com/websitecd/websitecd-examples.git websites/01-simple true [ \"prod[1/1]\" , \"dev[1/1]\" ] Deployed STATUS - Status of website. Can be: Git Clonning , Git Pulling , Creating , Deployed , Failed ENVIRONMENTS - Actual deployed environments and their ready/desired replicas. MESSAGE - Used for Failed status","title":"Get Website Info"},{"location":"user-guide/website-management/#register-website-in-cluster","text":"","title":"Register Website in Cluster"},{"location":"user-guide/website-management/#step-1-create-a-namespace","text":"kubectl create namespace website","title":"Step 1: Create a namespace"},{"location":"user-guide/website-management/#step-2-create-a-my-websiteyaml-file-and-apply-it-in-the-cluster","text":"apiVersion : websitecd.io/v1 kind : Website metadata : name : my-website # Name of the website. Must be unique within namespace spec : gitUrl : https://github.com/websitecd/websitecd-examples.git branch : main # Branch (Optional) dir : websites/02-advanced # Location of website.yaml file. Default is \".\" sslVerify : false # Perform SSL verification. Default is \"true\" secretToken : TOKENADVANCED # Secret token for Webhook API envs : # Control which environment will be deployed to. If not defined all envs are deployed. kubectl apply -n website -f my-website.yaml","title":"Step 2: Create a my-website.yaml file and apply it in the cluster"},{"location":"user-guide/website-management/#optional-control-mapping-environments-to-namespaces","text":"Thanks to exclusion and inclusion an administrator has under full control which environment will be deployed in which namespace.","title":"Optional - Control Mapping Environments to Namespaces"},{"location":"user-guide/website-management/#example-excluded-prod-environment","text":"spec : envs : excluded : - prod","title":"Example - excluded prod environment"},{"location":"user-guide/website-management/#example-included-only-prod-environment","text":"spec : envs : included : - prod","title":"Example - included only prod environment"},{"location":"user-guide/website-management/#example-included-only-pr-environment","text":"spec : envs : included : - pr-.*","title":"Example - included only pr-* environment"},{"location":"user-guide/website-management/#delete-website-in-cluster","text":"Delete website: kubectl delete websites.websitecd.io -n website my-website Delete namespace: kubectl delete namespace website","title":"Delete Website in Cluster"},{"location":"user-guide/website-specification/","text":"Website Specification Website is specified in website.yaml and covers Environments and Components . Environments Each environment defines: Name (as object key) Default branch Deployments overrides Skip Components Example: envs : dev : branch : main prod : branch : prod Components Every component needs to define its kind . This allows design a website as different components with their sources. Component git Content stored in git repository in particular branch or tag . components : - context : /path kind : service # Service kind - only route/ingress is created spec : url : https://github.com/websitecd/websitecd-examples.git # Git URL of repository. Default is Git URL of website.yaml dir : /websites/02-advanced/chrome # Subdirectory within. Default is \".\" branch : \"1.0.0\" # Branch/Tag override on component level envs : dev : \"2.0.0\" # Branch/Tag override on environment level Component service Component has no content and Operator just creates a route for it. components : - context : /path kind : service spec : serviceName : searchapi # Service name targetPort : 8080 # Service port Defaults and Overrides The website.yaml strongly uses defaults & overrides strategy. For example branch name is defined on following places: Environment -> Component -> Component's environment envs.<env_name>.branch -> components.spec.branch -> components.spec.envs.<env_name> This offers flexibility to design each environment differently. Complete Spec Reference The complete website.yaml reference apiVersion : v1 # Website API reference labels : # Labels label-key : label-value # Key is label key, Value is label value envs : # Website environments dev : # Name of environment branch : main # Default branch for all componetns prod : branch : prod skipContexts : # Skip Components for given - /search - /search/api deployment : # Deployment Overrides replicas : 2 # Number of replicas httpd : # Overrides for httpd resources : # Standard k8s resources requests : cpu : 100m memory : 150Mi limits : cpu : 500m memory : 250Mi components : # Components - context : /theme # Path under component lives kind : git # Component kind. Available kinds: \"git\", \"service\" spec : url : https://github.com/websitecd/websitecd-examples.git # Git URL of repository. Default is Git URL of website.yaml dir : /websites/02-advanced/chrome # Subdirectory within. Default is \".\" branch : \"1.0.0\" # Branch override on component level envs : dev : \"2.0.0\" # Branch override on environment level - context : /search/api kind : service # Service kind - only route/ingress is created spec : serviceName : searchapi # Service name targetPort : 8080 # Service port - context : / # Home SPA kind : git spec : dir : /websites/02-advanced/home","title":"Website Specification"},{"location":"user-guide/website-specification/#website-specification","text":"Website is specified in website.yaml and covers Environments and Components .","title":"Website Specification"},{"location":"user-guide/website-specification/#environments","text":"Each environment defines: Name (as object key) Default branch Deployments overrides Skip Components Example: envs : dev : branch : main prod : branch : prod","title":"Environments"},{"location":"user-guide/website-specification/#components","text":"Every component needs to define its kind . This allows design a website as different components with their sources.","title":"Components"},{"location":"user-guide/website-specification/#component-git","text":"Content stored in git repository in particular branch or tag . components : - context : /path kind : service # Service kind - only route/ingress is created spec : url : https://github.com/websitecd/websitecd-examples.git # Git URL of repository. Default is Git URL of website.yaml dir : /websites/02-advanced/chrome # Subdirectory within. Default is \".\" branch : \"1.0.0\" # Branch/Tag override on component level envs : dev : \"2.0.0\" # Branch/Tag override on environment level","title":"Component git"},{"location":"user-guide/website-specification/#component-service","text":"Component has no content and Operator just creates a route for it. components : - context : /path kind : service spec : serviceName : searchapi # Service name targetPort : 8080 # Service port","title":"Component service"},{"location":"user-guide/website-specification/#defaults-and-overrides","text":"The website.yaml strongly uses defaults & overrides strategy. For example branch name is defined on following places: Environment -> Component -> Component's environment envs.<env_name>.branch -> components.spec.branch -> components.spec.envs.<env_name> This offers flexibility to design each environment differently.","title":"Defaults and Overrides"},{"location":"user-guide/website-specification/#complete-spec-reference","text":"The complete website.yaml reference apiVersion : v1 # Website API reference labels : # Labels label-key : label-value # Key is label key, Value is label value envs : # Website environments dev : # Name of environment branch : main # Default branch for all componetns prod : branch : prod skipContexts : # Skip Components for given - /search - /search/api deployment : # Deployment Overrides replicas : 2 # Number of replicas httpd : # Overrides for httpd resources : # Standard k8s resources requests : cpu : 100m memory : 150Mi limits : cpu : 500m memory : 250Mi components : # Components - context : /theme # Path under component lives kind : git # Component kind. Available kinds: \"git\", \"service\" spec : url : https://github.com/websitecd/websitecd-examples.git # Git URL of repository. Default is Git URL of website.yaml dir : /websites/02-advanced/chrome # Subdirectory within. Default is \".\" branch : \"1.0.0\" # Branch override on component level envs : dev : \"2.0.0\" # Branch override on environment level - context : /search/api kind : service # Service kind - only route/ingress is created spec : serviceName : searchapi # Service name targetPort : 8080 # Service port - context : / # Home SPA kind : git spec : dir : /websites/02-advanced/home","title":"Complete Spec Reference"}]}